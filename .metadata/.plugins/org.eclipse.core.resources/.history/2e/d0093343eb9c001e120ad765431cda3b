package com.example.core.demo1.postgres.entity;

import java.util.HashMap;
import java.util.Map;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.core.env.Environment;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.JpaVendorAdapter;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import jakarta.persistence.EntityManagerFactory;

@Configuration
@EnableTransactionManagement
@EnableJpaRepositories(
        basePackages = "com.example.core.demo1.postgres.entity",
        entityManagerFactoryRef = "secondEntityManagerFactory",
        transactionManagerRef = "secondTransactionManager"
)
public class PostgresDbConfig {
	
	@Autowired
	private Environment environment;
	
	    @Primary
	    @Bean(name = "secondDataSource")
	    @ConfigurationProperties(prefix = "spring.datasource.second")
	    public DataSource dataSource() {
	    	
	    	DriverManagerDataSource dataSource = new DriverManagerDataSource();
	    	dataSource.setUrl(environment.getProperty("second.datasource.url"));
	    	dataSource.setDriverClassName(environment.getProperty("second.datasource.driver-class-name"));
	    	dataSource.setUsername(environment.getProperty("second.datasource.username"));
	    	dataSource.setPassword(environment.getProperty("second.datasource.password"));
	        return dataSource;
	    }

	    @Primary
	    @Bean(name = "secondEntityManagerFactory")
	    public LocalContainerEntityManagerFactoryBean entityManagerFactory(  ) {
	    	
	    	LocalContainerEntityManagerFactoryBean bean = new LocalContainerEntityManagerFactoryBean();
	    	
	    	JpaVendorAdapter adapter = new HibernateJpaVendorAdapter();
	    	bean.setJpaVendorAdapter(adapter);
	    	
	    	bean.setDataSource(dataSource());
	   
	    	
	    	
	    	Map<String,String> props = new HashMap<>();
	    	props.put("hibernate.dialect","org.hibernate.dialect.PostgreSQLDialect");
	    	props.put("hibernate.show_sql","true");
	    	props.put("hibernate.hbm2ddl.auto","update");
	    	
	    	bean.setJpaPropertyMap(props);
	    	bean.setPackagesToScan("com.example.core.demo1.oracle.entity");
	        return bean;
	    }

	    @Primary
	    @Bean(name = "secondTransactionManager")
	    public PlatformTransactionManager transactionManager(
	            @Qualifier("secondEntityManagerFactory") EntityManagerFactory entityManagerFactory) {
	        return new JpaTransactionManager(entityManagerFactory);
	    }

}